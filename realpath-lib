#!/usr/bin/env bash

# realpath-lib
# ------------
#
# A Bash library for physical, logical and symlinked file path resolution.
# Designed with portability in mind, it utilizes Bash builtins 'cd', 'printf' 
# and 'echo' along with Bash parameter substitution.  One external dependency
# is used that is the posix utility 'ls' that is needed to identify symlinked
# files only (not directories).  This does not disadvantage the script in terms
# of portablility and, in some respects, this script offers better behaviour
# and better cross-platform compatability than 'readlink'.  Versioning is done
# according to issue date.
#
# Version : 2013.11.12.02
# Usage   : source /path/to/realpath-lib
# Output  : (none)
#
# get_realpath "path/to/file"
# --------------------------
#
# The core method is 'get_realpath' - that method does all the heavy lifting.
# The other interface methods are designed to simply filter this output and
# minimize side effects, and any error conditions generated by 'get_realpath'
# are simply passed through all other interface methods.
# 
# no_symlinks
# -----------
#
# To ensure that 'get_realpath' resolves logical and symlinked locations to 
# physical locations, set the environment variable 'no_symlinks' to a value;
# logically this would be something like 'no_symlinks=on' or similar.  One
# approach is to do this within the script where 'get_realpath' is envoked,
# for example:
#
#     no_symlinks=on get_realpath "path/to/file"    # symlinks are resolved
#     no_symlinks=   get_realpath "path/to/file"    # symlinks not resolved
#
# or this can be set globally by uncommenting it in the environment settings 
# below.  By default it is switched off - so symlinks are not resolved.
#
# Error Conditions
# ----------------
#
# Each of the interface methods return the status conditions as:
#
# 0 : Pass.
# 1 : Fail : no file/special file/broken symlink error.
# 2 : Fail : physical path to file resolution issues.
# 3 : Fail : logical or physical directory issues.
#
# Interface Methods
# -----------------
#
# "path/to/file" is an absolute path, a relative path or a file name.
# Returned paths or directories can be logical or physical depending
# upon the state of 'no_symlinks'.
#
# get_realpath      "path/to/file"  : returns absolute path to file.
# get_dirname       "path/to/file"  : returns absolute directory.
# get_filename      "path/to/file"  : returns file name with extension.*
# get_stemname      "path/to/file"  : returns stem name of the file.**
# validate_realpath "path/to/file"  : returns 0 or exits. Use with care!***
#
# *   the filename is the file name and extension eg. 'source.ext'.
# **  the stemname is the file name without the extension eg. 'source'.
#     A file such as 'source.tar.gz' will be returned as 'source'.
# *** WARNING: using validate_path at shell level will kill the shell!
#
# Test Return Values
# ------------------
#
# get_realpath "$1" &>/dev/null
# code=$?
# if (( $code ))   # Non-zero.
# then
#     # Do failure actions.
#     return $code # Failure.
# fi
# return $code     # Success. 
#
# Copyright (C) Applied Numerics Ltd 2013 under the brand name AsymLabs (TM)
# and published under the terms of the MIT license. Although we have not
# yet encountered any issues, there is no warrany of any type given so you
# must use it at your own risk. You have been warned.
#
# Comments are welcomed and may be forwarded to the author at:
#
# mailto:dv@angb.co

# Created by G R Summers Fri 27 Sep 2013 11:30:11 BST
# Updated by G R Summers Sat 05 Oct 2013 06:19:30 BST
# Updated by G R Summers Tue 12 Nov 2013 15:17:38 GMT

#### ENVIRONMENT SETTINGS ####

# Enviromment. By default the logical file system will be used. Otherwise
# uncomment the following to use the physical system. Default is commented.
# readonly no_symlinks='on'

#### PRIVATE HELPER METHODS ####

# _file "path/to/file" : print the file of a given path (private function).
function _file(){
    printf '%s' "${1##*/}"
}

# _stem "path/to/file" : print file stem of a given path (private function).
function _stem(){
    local _name="$(_file "$1")"
    printf '%s' "${_name%%.*}"
}

# _directory "path/to/file" : get the directory of a path (private function)
function _directory(){
    printf '%s' "${1%/*}"
}

# _cd "path/to/file" : change to the directory of a path (private function).
function _cd(){
    cd "$(_directory "$1")" 2>/dev/null
}

# _get "function" "path/to/file" : repeated structure (private function).
# Uses get_realpath and passes exit conditions on. Non-zero exit fails.
function _get(){
    local _path="$(get_realpath "$2")"
    local _code=$?
    if (( $_code )) # non-zero.
    then
        return $_code # failure
    fi
    $1 "$_path"
    return $_code # success
}

#### PUBLIC INTERFACE METHODS ####

# get_dirname "path/to/file" : gets the directory name of a path to file.
function get_dirname(){
    _get _directory "$1"
}

# get_filename "path/to/file" : gets a file name from a path to file.
function get_filename(){
    _get _file "$1"
}

# get_stemname "path/to/file" : gets a stem name (removes directory and extension).
function get_stemname(){
    _get _stem "$1"
}

# validate_realpath "path/to/file" : validate that path to file exists or exit.
function validate_realpath() {
    get_realpath "$1" &>/dev/null
    local _code=$?
    local _messg='Unspecified/unknown failure condition'
    case $_code in
    0)
            # success
	        return $_code
	;;
	1)
            # failure
            _messg='No file, special type or broken symlink'
	;;
	2)
            # failure
            _messg='Physical path to file resolution issues'
	;;
	3)
            # failure
            _messg='Logical or physical directory issues'
	;;
	*)
            # failure but do nothing.
	;;
    esac
    echo "Error [$_code] : $_messg, exiting..."
    exit 1
}

#### GET_REALPATH ####

# get_realpath "path/to/file" : print the full logical or physical path. There
# are four possible exit conditions, where success returns 0, see the comments
# in the function. This function is not pure Bash in that it relies on 'ls -dl'
# but since 'ls' is posix standard it should remain portable.
function get_realpath(){
    # 0 : Pass.
    # 1 : Fail : no file/special file/broken symlink error.
    # 2 : Fail : physical path to file resolution issues.
    # 3 : Fail : logical or physical directory issues.
    [[ ! -f "$1" ]] && return 1 # Error code 1.
    if [[ -z "$no_symlinks" ]]
    then
        local _pwd='pwd'
    else
        local _pwd='pwd -P'
        if [[ -L "$1" ]]
        then
            local _ls="$( ls -dl "$1" 2>/dev/null )" &&
            local _link="$( printf '%s' "${_ls#*"${1} -> "}" )" &&
            echo "$( _cd "$1"; _cd "$_link" && $_pwd )"/"$(_file "$_link")" &&
            return 0 || return 2 # Error code 2.
        fi
    fi
    echo "$( _cd "$1"; $_pwd )"/"$(_file "$1")" &&
    return 0 || return 3 # Error code 3.
}

# end realpath-lib
