{"name":"Realpath-lib","tagline":"Bash-centric realpath tools for cross-platform portability.","body":"realpath-lib\r\n============\r\n\r\nThe lightweight and simple Bash library **realpath-lib** provides functions that\r\ncan resolve the full path associated with symlinks and file names.  There are \r\nseveral environments available but by default the function **get_realpath** will\r\nemulate the popular, but often not available, command utility GNU **readlink -f**.  \r\n  \r\nCore functions are:  \r\n\r\n>get_realpath  \r\n>get_dirname  \r\n>get_filename  \r\n>get_stemname  \r\n>get_extension  \r\n>validate_realpath  \r\n\r\n**realpath-lib** was inspired in part by realpath tools that are available in\r\nother programming languages.  This script illustrates that path processing \r\ncan be done in Bash with minimal dependencies. This script requires only the \r\nwidely used Posix&reg; compliant standard utility **ls** to resolve symlinked\r\nfile names only.  \r\n   \r\nAlthough we have not tested this script widely, it should work across most, if\r\nnot all, Unix systems and variants.  \r\n\r\nMotivation\r\n==========\r\n\r\nRecent work writing scripts that should function the same way across Mac, Linux\r\nand Windows has revealed that certain system/Bash tools are not available for\r\nall platforms. Quite often the recommended way of resolving file names is to use\r\nutilities such as *readlink*, *basename*, *dirname* or perhaps others that have \r\noften led to portability issues.  \r\n  \r\nFor this reason we have prepared this set of tools for use in Bash scripts with\r\nonly simple built-in features and one widely available Posix&reg; standard utility\r\n**ls**.  \r\n\r\nFeatures\r\n========\r\n\r\nThere are number of beneficial features:  \r\n\r\n* **Bash 4+** and only one dependency, the Posix&reg; standard **ls**.  \r\n* Almost complete portability across Unix systems, Mac (and Windows?).   \r\n* Emulation of **readlink -f** (without readlink!) by default.  \r\n* No need for external dependencies basename, dirname or readlink.\r\n* Diagnostic investigation of symlinks, circular references, and chains.  \r\n* **set_strict**, ensuring targets are regular, not broken and exist.  \r\n* **set_logical**, for efficient determination of logical absolute paths.  \r\n* Test scripts to assess platform compatabiity and readlink emulation.  \r\n* Robust design approach, minimal side effects with custom environments.  \r\n* Exception system that throws exit status and suggests solutions.  \r\n* Compact, efficient source that is well commented and easy to maintain.  \r\n* Free and open source, under the liberal terms of the **MIT license**.  \r\n  \r\nThe path argument can be provided as a local file name, relative path or an\r\nabsolute path.  It permits symlinks to be resolved by default by emulating\r\n**readlink -f**.  Interface methods are classified into two groups: getters\r\nand validators.  \r\n\r\nThere are a number of environments that are summarized under the section \r\nthat follows.  These are also explained in detail in the source code file.  \r\n\r\nGetters\r\n-------\r\n\r\nThe following functions will resolve the path argument to a full absolute path\r\nstring (if it exists) and throw a status condition of **0 for success** or\r\n**1 to 7 for failure** - meaning they can be used for testing purposes too.  \r\n  \r\n>get_realpath  'path-arg'  \r\n>get_dirname   'path-arg'  \r\n>get_filename  'path-arg'  \r\n>get_stemname  'path-arg'  \r\n>get_extension 'path-arg'  \r\n  \r\nwhere **path-arg** can be a local file, a relative path or absolute path.  \r\n  \r\nValidators\r\n----------\r\n\r\nThe function **validate_realpath** will throw a status condition of **0 for success**\r\nor will **abort on failure**.  This leads us to the following warning: **do not\r\nuse validate_realpath at the top level of your shell - as a failure to validate\r\nwill kill the shell and any sub-processes!**  \r\n  \r\n>validate_realpath 'path-arg'  \r\n   \r\nwhere **path-arg** is the same as above.  \r\n\r\nEnvironment\r\n-----------\r\n\r\nThere are three settable environments (default values are shown):  \r\n\r\n>set_strict=  \r\n>set_logical=  \r\n>set_max_depth=5  \r\n  \r\nAs indicated previously, the default (out of the box) settings are done to emulate\r\nthe command **readlink -f**.  Another interesting feature of the default settings\r\nis that the chain of symlinks for a given path can be unwound where an error is\r\nthrown - useful for diagnostic purposes.  Capture stderr to view this information.\r\nThe test scripts are illustrative.  \r\n  \r\n**set_strict**: setting this environment enforces strict checking of target paths.\r\nA path must exist and must lead to a regular file, a symlink target must exist,\r\nand a symlink cannot be broken.  This is at odds with the command **readlink -f**.  \r\n  \r\nNote that a given system may have system limits on link recursion.  So invoking\r\nthe environment **set_strict** may lead to an unspecified error where very\r\ndeep symlink chains exist.\r\n\r\n**set_logical**: setting this environment will see that symlinked files will not be \r\nresolved to the physical system.  This is at odds with the command **readlink -f**.  \r\n  \r\nNote that the environment **set_max_depth** is not used nor will symlink chains\r\nbe assessed when **set_logical** is invoked.\r\n  \r\n**set_max_depth**: setting this environment controls the depth of symlink recursion.\r\nRecursion exits on three conditions: 1) when a duplicate reference occcurs (as a\r\ncircular reference), 2) when the set_max_depth is reached, or 3) when the built-in\r\ninternal limit (40) is reached, whichever occurs first.  So if the set_max_depth\r\nis set to greater than 40, it will be disregarded, and 40 shall be enforced.  Of\r\ncourse this limit can be changed, but will require modification of the source.\r\n  \r\nDependencies\r\n------------\r\n  \r\nDependencies are Bash 4+, Posix&reg; standard **ls** and nothing else. This\r\ncould be refactored to work with earlier Bash versions but we leave this as \r\nan exercise for others.  \r\n  \r\nWhere the dependency **ls** is required but cannot be found (only in the \r\nspecial case where symlinks are files, it is not needed to resolve directory\r\nsymlinks), the script will throw a non-zero status and exit with a message \r\nto stderr.  \r\n  \r\nUsage\r\n=====\r\n  \r\nThis is not a Bash executable.  Source it at the beginning of your executable\r\nscript with:  \r\n\r\n    source '/your/path/to/realpath-lib'\r\n\r\nAs indicated previously, the default setting is to emulate the command utility \r\n**readlink -f**. Environment settings can be incorporated within your script or\r\ninline as:\r\n\r\n    get_realpath 'path-arg' # emulate readlink -f, traverse a link chain of 5  \r\n    set_strict=true set_logical=true set_max_depth=20 get_realpath 'path-arg'  \r\n    set_strict=     set_logical=true set_max_depth=10 get_stemname 'path-arg'  \r\n\r\nand so on.  \r\n  \r\nTest Scripts\r\n============\r\n  \r\nTwo test scripts have been added and successfully tested on Linux, Solaris, \r\nMac OSX and BSD.  These resulted from issues identified within a thread of \r\nNovember 2013 that can be found [here](https://github.com/AsymLabs/realpath-lib/issues/1).  \r\n  \r\nThe scripts are: 1) **make-generic-test.sh** and 2) **make-readlink-test.sh**.\r\nThe **generic** test script can be used to test the script on a specific system,\r\nwhereas the **readlink** script can be used to assess the library against the \r\nexpected result of the **readlink** command.  Note that, as of the Auno merge of\r\nFebruary 2014, GNU readlink is no longer required to conduct this test. These\r\nscripts can also be used to gain a better understanding of realpath-lib.  \r\n  \r\nAs part of tests, a directory and subdirectories are created that are traversed\r\nin order to test such things as chained symlinks, symlinks of circular \r\nreference, broken symlinks, non-existent symlinks or files and others. A tree\r\nfor this found in the source code files.  It can also be examined by the \r\ncommand **tree foo** after running the script.\r\n  \r\nBoth scripts will produce a uniquely stamped test log and error log that will be\r\ndisplayed upon completion.  These can be used for diagnostic purposes on any\r\ngiven Bash system.  The logs can be supplied to us should you have problems\r\nusing **realpath-lib** on your system.  \r\n\r\nThe following is an excerpt from the test output (stdout) of **make-generic-test.sh**:  \r\n\r\n    ### Circular references, paths from 'foo/' for files that are symlinks ########\r\n    Try get_realpath   circular ref foo/bar1/foo->bar1.sym   set_logical=true  Pass\r\n    Try get_realpath   circular ref foo/bar1/foo->bar1.sym   set_logical=      Pass\r\n    Try get_realpath   circular ref foo/bar2/foo->bar2.sym   set_logical=true  Pass\r\n    Try get_realpath   circular ref foo/bar2/foo->bar2.sym   set_logical=      Pass\r\n    Try get_dirname    circular ref foo/bar1/foo->bar1.sym   set_logical=true  Pass\r\n    Try get_dirname    circular ref foo/bar1/foo->bar1.sym   set_logical=      Pass\r\n    Try get_extension  circular ref foo/bar1/foo->bar1.sym   set_logical=true  Pass\r\n    Try get_extension  circular ref foo/bar1/foo->bar1.sym   set_logical=      Pass\r\n    ....  \r\n\r\nThe following is an excerpt from the error output (stderr) of **make-generic-test.sh**:   \r\n\r\n    ### Circular references, paths from 'foo/' for files that are symlinks ########\r\n    L [00] -> /home/user/realpath-test/foo/bar2/foo->bar2.sym\r\n    L [01] -> /home/user/realpath-test/foo/bar1/foo->bar1.sym\r\n    L [02] -> /home/user/realpath-test/foo/bar2/foo->bar2.sym\r\n    E [06] Symlink circular reference issue has been detected ...\r\n    -----> Symlink circular reference should be investigated manually ...\r\n    L [00] -> /home/user/realpath-test/foo/bar1/foo->bar1.sym\r\n    L [01] -> /home/user/realpath-test/foo/bar2/foo->bar2.sym\r\n    L [02] -> /home/user/realpath-test/foo/bar1/foo->bar1.sym\r\n    E [06] Symlink circular reference issue has been detected ...\r\n    -----> Symlink circular reference should be investigated manually ...\r\n    L [00] -> /home/user/realpath-test/foo/bar2/foo->bar2.sym\r\n    L [01] -> /home/user/realpath-test/foo/bar1/foo->bar1.sym\r\n    L [02] -> /home/user/realpath-test/foo/bar2/foo->bar2.sym\r\n    E [06] Symlink circular reference issue has been detected ...\r\n    -----> Symlink circular reference should be investigated manually ...\r\n    ...  \r\n\r\nWhere:  \r\n  \r\n    L [..] denotes the link (shallow to deep).   \r\n    E [..] denotes the error message emitted.  \r\n    -----> denotes a possible solution.  \r\n\r\nExamples\r\n========\r\n\r\nTo use the 'getters' for testing purposes, do something like:  \r\n\r\n    get_realpath \"$1\" &>/dev/null\r\n    if (( $? ))  # true when non-zero.\r\n    then\r\n        # Do failure actions. \r\n        return 1 # Failure. \r\n    fi\r\n\r\nWhile these are designed to be used exclusively in scripts, some top level shell\r\nexamples are:  \r\n\r\n    [user@host MyLib]$ ls '/home/user/MyLib/archive.tar.gz'  \r\n    /home/user/MyLib/archive.tar.gz  \r\n      \r\n    [user@host MyLib]$ source realpath-lib  \r\n    [user@host MyLib]$  \r\n      \r\n    [user@host MyLib]$ get_realpath 'archive.tar.gz'  \r\n    /home/user/MyLib/archive.tar.gz  \r\n      \r\n    [user@host MyLib]$ get_dirname 'archive.tar.gz'  \r\n    /home/user/MyLib  \r\n      \r\n    [user@host MyLib]$ get_filename 'archive.tar.gz'  \r\n    archive.tar.gz  \r\n      \r\n    [user@host MyLib]$ get_stemname 'archive.tar.gz'  \r\n    archive  \r\n      \r\n    [user@host MyLib]$ validate_realpath 'archive.tar.gz'  \r\n    [user@host MyLib]$  \r\n      \r\n    [user@host MyLib]$ cd ../Templates  \r\n    [user@host Templates]$  \r\n      \r\n    [user@host Templates]$ get_realpath '../MyLib/archive.tar.gz'  \r\n    /home/user/MyLib/archive.tar.gz  \r\n      \r\n    [user@host Templates]$ get_dirname '../MyLib/archive.tar.gz'  \r\n    /home/user/MyLib  \r\n      \r\n    [user@host Templates]$ get_filename '../MyLib/archive.tar.gz'  \r\n    archive.tar.gz  \r\n      \r\n    [user@host Templates]$ get_stemname '../MyLib/archive.tar.gz'  \r\n    archive  \r\n      \r\n    [user@host Templates]$ validate_realpath '../MyLib/archive.tar.gz'  \r\n    [user@host Templates]$  \r\n  \r\nDesign\r\n======\r\n\r\nThe library is designed with private and interface methods in mind.  The \r\nfunction **get_realpath** is the core function for the system and the\r\nonly function that is permitted to emit error messages and status.  The\r\nother interface functions are wrappers that simply pass through the return\r\nstatus of **get_realpath**.  So it is possible to do the following (as a\r\ncontrived example) and expect consistent results:  \r\n\r\n    get_realpath 'path'  \r\n    get_stemname 'path'  \r\n    get_stemname \"$(get_realpath 'path')\"  \r\n    get_realpath \"$(get_realpath 'path')\"  \r\n    get_stemname \"$(get_realpath \"$(get_realpath 'path')\")\"  \r\n  \r\nThe last three examples will not be as efficient as the first two and are\r\nnot recommended, but the robust nature is illustrated.  \r\n  \r\nThe non-zero status conditions are not necessarily errors.  For example,\r\n**readlink -f** returns nothing if a circular reference is encountered.\r\nThis condition will throw a status 3 under **get_realpath** but this is\r\nnot an error.  It is intentional behaviour by default.  \r\n  \r\nFinally, we have attempted to use naming conventions that should avoid \r\ncollisions with other scripts.  This is not ensured, however, and care\r\nis required.  \r\n\r\nTerms\r\n=====\r\n\r\nWe offer this to the community for free and you may use it as you wish.  \r\n  \r\nThis source is Copyright (C) Applied Numerics Ltd 2013-2014, Great Britain,\r\nunder the brand name AsymLabs (TM) and is provided to the community under\r\nthe MIT license.  Although we have not yet encountered any issues, there\r\nis no warranty of any type given so you must use it at your own risk.  \r\n\r\nClosure\r\n=======\r\n\r\nWe are interested in the user experience with this library.  If you wish, \r\ncontact us to let us know if it works for your platform.  \r\n  \r\nWe can be contacted by email (as below) or you may start an issue thread \r\nthat provides the results of your tests if you wish.  We'll try to address\r\nyour concerns.  \r\n  \r\nWe hope that you find this Bash library to be of value.  Should you decide to \r\nuse it on your project, or should you have any comments or suggestions for\r\nimprovement, please contact us at dv@angb.co.  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}